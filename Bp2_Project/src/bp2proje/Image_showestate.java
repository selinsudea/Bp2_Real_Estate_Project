/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bp2proje;

import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Selin Sude ATALI
 */
public class Image_showestate extends javax.swing.JFrame {

    String username_i = "";
    int index = 0;
    int i = 0;
    int choose = 1;
    DefaultListModel model = new DefaultListModel();

    /*
    SetResizable(false) kullanarak panelimin olduğu boyutta kalmasını,maksimum hale getirilememesini sağlıyorum.
     */
    public Image_showestate() {
        initComponents();
        setResizable(false);
        list_house.setModel(model);
    }

    /*
    Normalde House sınıfımda bir houseList metodum var ama ben bu List frame'imde emlakçının sadece sisteme eklediği kendi evlerini görmesini istiyorum.
    Bunun içinde eğer Home'dan bana gelen username(bunu kullanıcıya sormuyorum login ekranından beri elimde tutuyorum) House databasesimde 3.sütunundaki
    username eşitse table da göstereceğim. Veritipi House sınıfım olan bir Arraylist oluşturuyorum.Yani sadece uygun formda veritipi kabul edebilir.
    House'dan bir nesne üreterek bunu house sınıfında belirlediğim variable'larıma atıyorum ve oluşturduğum houseList'e bunu add fonksiyonu ile ekliyorum.
    Return olarak houseList döndürüyorum. Bu Arraylist'i showhouse metodumda kullanacağım.
     */
    public ArrayList<House> houseList() {
        ArrayList<House> houseList = new ArrayList<>();
        String url = "jdbc:derby://localhost:1527/Records";
        String user = "Selin";
        String password = "123";
        try {
            Connection conn = DriverManager.getConnection(url, user, password);
            String query = "SELECT *FROM house";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            House house;
            while (rs.next()) {
                if (rs.getString(3).equals(username_i)) {
                    house = new House(rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getInt(6), rs.getBoolean(7), rs.getInt(8), rs.getBoolean(9), rs.getString(10), rs.getDouble(11), rs.getBytes(12), rs.getBytes(13), rs.getBytes(14));
                    houseList.add(house);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        return houseList;
    }

    /*
    Öncelikle houseList metodumu çağırıyorum ve bana oradan kullanıcının evlerinin bilgisi geliyor.Bunları oluşturduğum Table eklemek için bir 
    for döngüsünden yararlanıyorum ama evin bütün bilgilerinin sisteme eklenmesini istemediğim için sadece 9 sütunluk bir table oluşturuyorum ve eğer
    kullanıcı hangi eve tıkladıysa onun bütün özelliklerini o zaman görecek. Burada önceden gelen evin fotoğraflarını direkt label'a aktarıyordum ama
    araştırmalarım sonucunda Java'nın DefaultTableCellRenderer özelliğinden yararlanıyorum.
     */
    public void list() {
        ArrayList<House> list = houseList();
        ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).image).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
        lbl_image.setIcon(image);
        String furnished = "";
        String balcony = "";
        if (list.get(i).furnished == true) {
            furnished = "Furnished";
        } else {
            furnished = "Unfurnished";
        }
        if (list.get(i).balcony == true) {
            balcony = "Yes";
        } else {
            balcony = "No";
        }
        model.addElement("Id: " + list.get(i).id);
        model.addElement("Estate Agent: " + list.get(i).username);
        model.addElement("Type: " + list.get(i).type);
        model.addElement("City: " + list.get(i).city);
        model.addElement("Rooms: " + list.get(i).rooms);
        model.addElement("Balcony: " + balcony);
        model.addElement("Square: " + list.get(i).square);
        model.addElement("Furnished: " + furnished);
        model.addElement("Forhouse: " + list.get(i).forhouse);
        model.addElement("Cost: " + list.get(i).cost);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_image = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_house = new javax.swing.JList<>();
        btn_next = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(750, 500));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(750, 500));

        lbl_image.setMaximumSize(new java.awt.Dimension(300, 300));
        lbl_image.setMinimumSize(new java.awt.Dimension(300, 300));
        lbl_image.setPreferredSize(new java.awt.Dimension(300, 300));

        jScrollPane1.setViewportView(list_house);

        btn_next.setBackground(new java.awt.Color(240, 65, 119));
        btn_next.setText("Next");
        btn_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nextActionPerformed(evt);
            }
        });

        btn_before.setBackground(new java.awt.Color(240, 65, 119));
        btn_before.setText("Before");
        btn_before.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_beforeActionPerformed(evt);
            }
        });

        btn_update.setBackground(new java.awt.Color(240, 65, 119));
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(240, 65, 119));
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_image, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    Burada choose adında bir variable tanımlamıştım bu choose başta 1 olarak geliyor eğer kullanıcı before butonuna basarsa ilgili evin bir önceki yani 
    listteki 0.indexteki fotoğrafını gösteriyor.Eğer next butonuna basmışsa 2.indextekini gösteriyor.Bu şekilde hangi sayıdaysa ona göre choose güncelleniyor
    ve buna göre görseller geliyor.
     */
    private void btn_beforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_beforeActionPerformed
        // TODO add your handling code here:
        ArrayList<House> list = houseList();

        if (choose == 2) {
            ImageIcon image2 = new ImageIcon(new ImageIcon(list.get(i).image2).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
            lbl_image.setIcon(image2);
            choose--;
        } else if (choose == 1) {
            ImageIcon image1 = new ImageIcon(new ImageIcon(list.get(i).image).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
            lbl_image.setIcon(image1);
        }
    }//GEN-LAST:event_btn_beforeActionPerformed

    private void btn_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nextActionPerformed
        // TODO add your handling code here:
        ArrayList<House> list = houseList();
        if (choose == 1) {
            ImageIcon image2 = new ImageIcon(new ImageIcon(list.get(i).image2).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
            lbl_image.setIcon(image2);
            choose++;
        } else if (choose == 2) {
            ImageIcon image3 = new ImageIcon(new ImageIcon(list.get(i).image3).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
            lbl_image.setIcon(image3);
        }
    }//GEN-LAST:event_btn_nextActionPerformed
    /*
    Kullanıcı seçili evi silmek isterse Sql'in delete komutundan yararlanıyorum.Kullanıcı eğer silmekten eminse JoptionPane de Yes'i seçtiyse
    0 değeri dönüyor ve evin id'sini databasede bulduğu satırdaki ilgili evi tamamen siliyor.
     */
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        String url = "jdbc:derby://localhost:1527/Records";
        String user = "Selin";
        String password = "123";
        String query = "DELETE FROM house WHERE id=?";
        int value = JOptionPane.showConfirmDialog(null, "Are you sure to delete this house?", "Warning", JOptionPane.YES_NO_OPTION);
        if (value == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection(url, user, password);
                PreparedStatement ps = conn.prepareStatement(query);
                ps.setInt(1, index);
                ps.executeUpdate();
                ps.close();
                conn.close();
                JOptionPane.showMessageDialog(null, "You deleted this house.", "Warning", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(Image_show.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You didnt delete this house.", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
        this.dispose();

    }//GEN-LAST:event_btn_deleteActionPerformed

    /*
    Update_house frame'ini çağıtırıyorum.Kullanıcının tıkladığı evin özelliklerini update_house frame'ine ekliyorum ve update house frame'inde
    yaptığım update metodu sayesinde ekranda ilgili bölümlerde evimin özelliklerini olmuş oluyor. 
     */
    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:

        ArrayList<House> list = houseList();
        ImageIcon image = new ImageIcon(new ImageIcon(list.get(i).image).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
        ImageIcon image2 = new ImageIcon(new ImageIcon(list.get(i).image2).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
        ImageIcon image3 = new ImageIcon(new ImageIcon(list.get(i).image3).getImage().getScaledInstance(300, 200, Image.SCALE_SMOOTH));
        Update_house update_house = new Update_house();
        update_house.id_a = index;
        update_house.type = list.get(i).type;
        update_house.city = list.get(i).city;
        update_house.rooms = list.get(i).rooms;
        update_house.balcony = list.get(i).balcony;
        update_house.square = list.get(i).square;
        update_house.furnish_type = list.get(i).furnished;
        update_house.for_house = list.get(i).forhouse;
        update_house.cost = String.valueOf(list.get(i).cost);
        update_house.imageicon = image;
        update_house.imageicon2 = image2;
        update_house.imageicon3 = image3;
        update_house.Update();
        this.dispose();
        update_house.setVisible(true);


    }//GEN-LAST:event_btn_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Image_showestate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Image_showestate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Image_showestate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Image_showestate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Image_showestate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_next;
    private javax.swing.JButton btn_update;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JList<String> list_house;
    // End of variables declaration//GEN-END:variables
}
